controller ---------





import Task from '#model/task.js';
import Users from '#model/users.js';

const createTask = async (req, reply) => {
  try {
    let doctor,org_id,role_id,resource_id_resource , resource_id_sharing;
    const user = await Users.find({ doctor_id: req.body.doctor_id , akou_id: req.body.akou_id})
    user.map((ele) => {
      doctor = ele.doctor_id
      org_id = ele.akou_id
    })
    console.log(doctor,org_id)
    let collection = 'user_roles_rel';
    let query = `user_id=${doctor}`
    let url1 = `http://akdevapp.duckdns.org:52203/api/v1/promsv2/${collection}?${query}`
    const headers = {
      "Authorization": "Bearer secret"
    }
    const result1 =  await call_api(url1,headers);
    result1.map((res=>{
      role_id = res.role_id 
    }))

    const url3 = `http://akdevapp.duckdns.org:52203/api/v1/promsv2/resources`
    const result3 =  await call_api(url3,headers);
    resource_id_resource = result3[result3.length-1].resource_id + 1
    console.log("for resources",resource_id_resource);

    // const url4 = `http://akdevapp.duckdns.org:52203/api/v1/promsv2/resource_sharing`
    // const result4 =  await call_api(url4,headers);
    // resource_id_sharing = result4[result4.length-1].resource_id + 1
    // console.log("for resources_sharing",resource_id_sharing )

    let header = req.headers;
    let method = 'post';

   let url = `http://akdevapp.duckdns.org:52203/api/v1/promsv2/resources` 
   await call_api(url,header,method,{text:req.body.text,status:req.body.status,resource_id:resource_id_resource,resource_type:req.body.type});

   let url2  = `http://akdevapp.duckdns.org:52203/api/v1/promsv2/resource_sharing`
   const result2 =  await call_api(url2,header,method,{resource_id:resource_id_resource,type:req.body.type,role_id:role_id,permission:req.body.permission,org_id:org_id,ak_id:doctor});
   console.log(result1)


    return reply.status(201).send({ message: 'Task created', data: result2 });
  } catch (err) {
    return reply.status(500).send({ message: `Error occur at ${err}` });
  }
}



const getAllTask = async (req, reply) => {
  try {
    const tasks = await Task.find({ doctor: req.params.doctor })

    return reply.status(200).send({ message: 'All Task Get By An Doctor', data: tasks });

  } catch (err) {
    return reply.status(500).send({ message: `Error occur at ${err}` });
  }
}


const updateTask = async (req, reply) => {
  try {
    let newdata = { text: req.body.text };
    const task = await Task.findByIdAndUpdate(req.params._id, newdata, {
      new: true,
      runValidators: true,
      useFindAndModify: false
    })

    return reply.status(201).send({ message: 'Task Updated', data: task });
  } catch (err) {
    return reply.status(500).send({ message: `Error occur at ${err}` });
  }
}


const deleteTask = async (req, reply) => {
  try {
    // let result;
    // const task = await Task.find({_id:req.params._id})
    // if (!task) {
    //   return reply.status(400).send({ message: `Task not find` });
    // }
    let resource_id = req.params.resource_id
    const url = `http://akdevapp.duckdns.org:52203/api/v1/promsv2/resources?resource_id=${resource_id}`
    const headers = {
      "Authorization": "Bearer secret"
    }
    let method = 'delete';
    const result =  await call_api(url,headers,method);


    const url1 = `http://akdevapp.duckdns.org:52203/api/v1/promsv2/resource_sharing?resource_id=${resource_id}`
    const result1 =  await call_api(url,headers,method);

    // task.map((ele)=>{
    //   result = ele
    // })
    // await result.remove()

    return reply.status(200).send({ message: 'Task deleted' });
  } catch (err) {
    return reply.status(500).send({ message: `Error occur at ${err}` });
  }
}





export { createTask, getAllTask, updateTask, deleteTask }










route --------------->


import { createTask ,getAllTask, updateTask,deleteTask} from '#controller/task.js';
// import {jwtToken} from '#middlewares/jwt_token.js'

export default async function (fastify, opts) {
  fastify.post('/api/v2/intcda/createtask', createTask );
  fastify.get('/api/v2/intcda/getalltask/:doctor', getAllTask );
  fastify.put('/api/v2/intcda/updatetask/:_id', updateTask );
  fastify.delete('/api/v2/intcda/deletetask/:_id', deleteTask );



}
























db.getCollection(‘users’).find({“akdc_id”: “AKPT000001"})
1:18
Doctor login url
1:18
http://akdevapp.duckdns.org:40001/doctor/login
1:18
Patient login
1:18
http://akdevapp.duckdns.org:40001/login
1:19
Doctor user
michael_jordan@gmail.com / Admin@123
1:19
Patient user
AKPT000001
1:22
Mongo DB
akdevapp.duckdns.org
51001